#!/usr/bin/python3
"""
Script to generate docstrings for python functions using ChatGPT.

Requires API key for ChatGPT. Declare as environment variable OPENAI_API_KEY
or pass in as argument with flag '-a'.

Also requires path to python file requiring docstrings. Pass in as argument with '-i'

NOTE: OpenAI will store API data (for 30 days). Don't run on files containing
sensitive data inside functions (hardcoded secrets, etc.). Only function blocks
are sent. Any statements outside function scope are not (global vars, imports, etc.)

@author: Rohan Khatwani <rohan.khatwani@gmail.com>
"""

import argparse
import os
import sys
import openai

openai.api_key = os.getenv('OPENAI_API_KEY')


def query_chatgpt(msg):
    """
    Get ChatGPT response for docstring by sending the python function
    via API call.
    NOTE: OpenAI will store API data (for 30 days). Don't run on files
    containing sensitive data inside functions (hardcoded secrets, etc.).
        args:
            msg: Python function from file
        returns:
            resp: ChatGPT response for docstring for {msg}
    """
    resp = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "user", "content": f"Create a short, concise docstring "
                                        f"for the following python code. "
                                        f"Please describe the arguments and return "
                                        f"value if relevant:\n\n{msg}\n"}
        ]
    )

    return resp.choices[0].message.content


def get_docstrings_gpt(python_file):
    """
    Reads a python file and parses functions within the file. Sends the
    function to ChatGPT for docstring response
        args:
            python_file: PATH to the python file requiring docstrings
    """
    docstrings = []
    with open(python_file, 'r', encoding='UTF-8') as in_file:
        append = False
        msg = ""
        for line in in_file.readlines():
            if line[:3] == 'def':
                # Then it is a function, so it needs a docstring!
                msg += line
                append = True
                continue
            if append and (line[:4] == '    ' or line[:4] == '\t'):
                # Ensure it is within the function's scope.
                msg += line
            else:
                if msg != "":
                    # Then there is code here
                    resp = query_chatgpt(msg)
                    if not (('"""' in resp) or ("'''" in resp)):
                        resp = '"""' + resp + '"""'
                    docstrings.append(resp)
                append = False
                msg = ""
    write_docstrings_gpt(python_file, docstrings)


# TODO: Create all these as issues in github...
# TODO: Docstring syntax and best practice...
# TODO: Type linting!!
def clean_docstring(docstring: str):
    # TODO: Put all the cleaning and formatting of docstring here...
    # - A fix to make sure words aren't split unexpectedly across lines.
    # - Incl. Return value and args description in docstring & format it appropriately

    """
    Coming soon
        args:
            docstring:
        returns:
            docstring:
    """
    return docstring


def write_docstrings_gpt(python_file: str, docstrings: list) -> None:
    """
    Reads from python_file and writes all content to another python_file.
    Inserts docstrings where appropriate and then deletes
    the 'original' python_file. New python_file contains docstrings and has
    the same name and location as the original.
        args:
            python_file: Path to python file requiring docstrings

            docstrings: List of docstrings generated by ChatGPT.
                        One docstring per function
        return:
            None: creates a new file containing ChatGPT generated
                  docstrings for functions
    """
    # remove .py extension and treat as .txt file
    to_rename = python_file[:-3] + '.txt'
    os.rename(python_file, to_rename)
    with open(to_rename, 'r', encoding='UTF-8') as in_file:
        with open(python_file, 'a', encoding='UTF-8') as out_file:
            out_file.write(f'\"\"\"Docstrings generated using ChatGPT\"\"\"\n')
            for line in in_file.readlines():
                out_file.write(line)
                if line[:3] == 'def':
                    # Need the indents....
                    docstring = docstrings.pop(0)
                    docstring = ''.join(docstring.splitlines())
                    if len(docstring) > 80:
                        for i in range(75, len(docstring), 75):
                            docstring = docstring[:i] + '\n    ' + docstring[i:]
                    print(docstring)
                    out_file.write(f"    {docstring}\n")
                out_file.flush()

    os.remove(to_rename)


def main():
    """Argument parsing for CLI usage"""
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input_file')
    parser.add_argument('-a', '--api_key')

    args = parser.parse_args()

    if not os.getenv('OPENAI_API_KEY'):
        if not args.api_key:
            print('No OPENAI_API_KEY found. Specify with -a <API KEY> '
                  'or set environment variable OPENAI_API_KEY')
            sys.exit(1)
        openai.api_key = args.api_key

    if not args.input_file:
        print('Must specify an input file: -i <filepath>')
        sys.exit(1)
    get_docstrings_gpt(args.input_file)


if __name__ == '__main__':
    main()
